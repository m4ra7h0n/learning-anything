package com.xjjlearning.java.util.concurrent.chapter6;import java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.Future;import java.util.concurrent.RecursiveTask;// about Reactivex Java (RxJava)// haven't read source codepublic class CountTask extends RecursiveTask<Integer> {    private static final int THRESHOLD = 2; // Add at most two numbers    private final int        start;    private final int        end;    public CountTask(int start, int end) {        this.start = start;        this.end = end;    }    @Override    protected Integer compute() {        int sum = 0;        boolean canCompute = (end - start) <= THRESHOLD;        if (canCompute) {            for (int i = start; i <= end; i++) {                sum += i;            }        } else {            int middle = (start + end) / 2;            CountTask leftTask = new CountTask(start, middle);            CountTask rightTask = new CountTask(middle + 1, end);            leftTask.fork();            rightTask.fork();            int leftResult = leftTask.join();            int rightResult = rightTask.join();            sum = leftResult + rightResult;        }        return sum;    }    public static void main(String[] args) {        ForkJoinPool forkJoinPool = new ForkJoinPool();        CountTask task = new CountTask(1, 4); //1 + 2 + 3 + 4        Future<Integer> result = forkJoinPool.submit(task);        try {            System.out.println(result.get());        } catch (InterruptedException | ExecutionException ignore) {        }    }}