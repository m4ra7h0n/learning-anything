<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace需要接口的全限定名称-->
<mapper namespace="com.xjjlearning.database.mysql.mapper.UserMapper">
    <resultMap id="userMap" type="com.xjjlearning.database.mysql.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

<!--    1 to 1-->
    <resultMap id="userRoleMap" type="com.xjjlearning.database.mysql.model.SysUser" extends="userMap">
        <!--        colum都加上role_前缀-->
        <association property="role" columnPrefix="role_" resultMap="com.xjjlearning.database.mysql.mapper.RoleMapper.roleMap"/>
    </resultMap>

<!--    1 to 1 with select-->
    <resultMap id="userRoleMapSelect" type="com.xjjlearning.database.mysql.model.SysUser" extends="userMap">
        <association property="role" column="{id=role_id}" select="com.xjjlearning.database.mysql.mapper.RoleMapper.selectRoleById"/>
    </resultMap>

<!--    1 to many-->
    <resultMap id="userRoleListMap" extends="userMap" type="com.xjjlearning.database.mysql.model.SysUser">
        <collection property="roleList" columnPrefix="role_" resultMap="com.xjjlearning.database.mysql.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select  * from sys_user where id = #{id}
    </select>

<!--    map-underscore-to-camel-case: true-->
<!--    type-aliases-package: com.xjjlearning.database.mysql.model-->
    <select id="selectAll" resultType="SysUser">
        select id,
               user_name,
               user_password,
               user_email,
               user_info,
               head_img,
               create_time
        from sys_user
    </select>

<!--   不要在里面加注释  -->
    <select id="selectRolesByUserId" resultType="SysRole">
        SELECT * from sys_role where id in (SELECT role_id from sys_user_role where user_id = #{userId});
    </select>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="SysRole">
        select * from sys_role where id in (select role_id from sys_user_role where user_id = #{userId}) and enabled = #{enabled};
    </select>

    <select id="selectRolesByUserAndRole" resultType="SysRole">
        select * from sys_role where id in (select role_id from sys_user_role where user_id = #{user.id}) and enabled = #{role.enabled}
    </select>


<!--    if the two of if don't worked then no where-->
<!--    or the 'and' will be cancelled-->
    <select id="selectByUser" resultType="SysUser">
        select * from sys_user
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>

<!--    关联的嵌套结果映射: 一次查询结果映射到不同的对象-->
<!--    1 to 1-->
<!--    使用resutlType-->
<!--    it's ok-->
<!--    <select id="selectUserAndRoleById" resultType="SysUser">-->
<!--        select u.id,-->
<!--               u.user_name,-->
<!--               u.user_password,-->
<!--               u.user_email,-->
<!--               u.user_info,-->
<!--               u.head_img,-->
<!--               u.create_time,-->

<!--               r.id "role.id",-->
<!--               r.role_name "role.roleName",-->
<!--               r.enabled "role.enabled",-->
<!--               r.create_by "role.createBy",-->
<!--               r.create_time "role.createTime"-->
<!--        from sys_user u-->
<!--                 inner join sys_user_role ur on u.id = ur.user_id-->
<!--                 inner join sys_role r on r.id = ur.role_id-->
<!--        where u.id = #{id}-->
<!--    </select>-->


<!--    使用extend & resultMap-->
<!--    1 to 1-->
<!--    it's ok-->
<!--    <select id="selectUserAndRoleById" resultMap="userRoleMap">-->
<!--        select u.id,-->
<!--               u.user_name,-->
<!--               u.user_password,-->
<!--               u.user_email,-->
<!--               u.user_info,-->
<!--               u.head_img,-->
<!--               u.create_time,-->

<!--               r.id role_id,-->
<!--               r.role_name role_role_name,-->
<!--               r.enabled role_enabled,-->
<!--               r.create_by role_createBy,-->
<!--               r.create_time role_createTime-->
<!--        from sys_user u-->
<!--            inner join sys_user_role ur on u.id = ur.user_id-->
<!--            inner join sys_role r on r.id = ur.role_id-->
<!--        where u.id = #{id}-->
<!--    </select>-->

<!--    嵌套查询(多次查询)-->
<!--    1 to 1-->
<!--    it's ok-->
    <select id="selectUserAndRoleById" resultMap="userRoleMapSelect">
        select u.id,
               u.user_name,
               u.user_password,
               u.user_email,
               u.user_info,
               u.head_img,
               u.create_time,
               ur.role_id
        from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
        where u.id = #{id}
    </select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select u.id,
               u.user_name,
               u.user_password,
               u.user_email,
               u.user_info,
               u.head_img,
               u.create_time,

               r.id role_id,
               r.role_name role_role_name,
               r.enabled role_enabled,
               r.create_by role_createBy,
               r.create_time role_createTime,

               p.id role_privilege_id,
               p.privilege_name role_privilege_privilege_name,
               p.privilege_url role_privilege_privlege_url

        from sys_user u
            inner join sys_user_role ur on u.id = ur.user_id
            inner join sys_role r on r.id = ur.role_id
            inner join sys_role_privilege rp on r.id = rp.role_id
            inner join sys_privilege p on p.id = rp.privilege_id
    </select>

<!--    人选id和name进行select-->
    <select id="selectByIdOrUserName" resultType="SysUser">
        select * from sys_user where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultType="SysUser">
        select * from sys_user where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

        <!--    date time datetime 应的 JDBC 类型分别为 DATE TIME TIMESTAMP-->
<!--    id写回 可以调用 <insert id="insert" useGeneratedKeys="true" keyProperty="id">-->
<!--    等同于添加  -->
<!--    <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">-->
<!--        select LAST_INSERT_ID();-->
<!--    </selectKey>-->
<!--    对于空的列使用默认值-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
            id, user_name, user_password,
                 <if test="userEmail != null and userEmail != ''">
                     user_email,
                 </if>
            user_info, head_img,
            create_time
        ) values (
               #{id}, #{userName}, #{userPassword},
                    <if test="userEmail != null and userEmail != ''">
                        #{userEmail},
                    </if>
               #{userInfo}, #{headImg, jdbcType=BLOB},
               #{createTime, jdbcType=TIMESTAMP}
              )
    </insert>

    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
            user_name, user_password, user_email,
            user_info, head_img,
            create_time
        ) values
         <foreach collection="list" item="user" separator=",">
            (
                #{user.userName}, #{user.userPassword}, #{user.userEmail},
                #{user.userInfo}, #{user.headImg, jdbcType=BLOB},
                #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!--    如果set标签中if都失效则没有set-->
    <update id="updateById">
        update sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg, jdbcType=BLOB},
            create_time = #{createTime, jdbcType=TIMESTAMP},
            id = #{id}
        </set>
        where id = #{id}
    </update>

<!--    当传入是map时 index是map的key-->
<!--    notice ${key} not #{key}-->
    <update id="updateByMap">
        update sys_user set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

<!--    动态更新-->
    <update id="updateByIdSelective">
        update sys_user set
        <if test="userName != null and userName != ''"> user_name = #{userName},</if>
        <if test="userPassword != null and userPassword != ''"> user_password = #{userPassword},</if>
        <if test="userEmail != null and userEmail != ''"> user_email = #{userEmail},</if>
        <if test="userInfo != null and userInfo != ''"> user_info = #{userInfo},</if>
        <if test="headImg != null"> head_img = #{headImg, jdbcType=BLOB},</if>
        <if test="createTime != null"> create_time = #{createTime, jdbcType=TIMESTAMP} </if>
        where id = #{id}
    </update>


    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>
</mapper>